<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leetcode on Jinwang Blog</title>
    <link>https://tfprimewj.github.io/categories/leetcode/</link>
    <description>Recent content in Leetcode on Jinwang Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Dec 2019 11:53:06 +0200</lastBuildDate>
    
	<atom:link href="https://tfprimewj.github.io/categories/leetcode/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LC617 合并二叉树</title>
      <link>https://tfprimewj.github.io/2019/12/17/lc617-%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Tue, 17 Dec 2019 11:53:06 +0200</pubDate>
      
      <guid>https://tfprimewj.github.io/2019/12/17/lc617-%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>617 合并二叉树 题目描述 给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。
你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为NULL 的节点将直接作为新二叉树的节点。
示例1:
输入:
	Tree 1 Tree 2 1 2 / \ / \ 3 2 1 3 / \ \ 5 4 7  输出:
合并后的树:
	3 / \ 4 5 / \ \ 5 4 7  注意:合并必须从两个树的根节点开始。
解法 public TreeNode mergeTrees (TreeNode t1, TreeNode t2) { if (t1 == null) return t2; if (t2 == null) return t1; t1.val += t2.</description>
    </item>
    
    <item>
      <title>Leetcode 589 N-ary Tree Preorder Traversal</title>
      <link>https://tfprimewj.github.io/2019/10/17/leetcode-589-n-ary-tree-preorder-traversal/</link>
      <pubDate>Thu, 17 Oct 2019 11:54:06 +0200</pubDate>
      
      <guid>https://tfprimewj.github.io/2019/10/17/leetcode-589-n-ary-tree-preorder-traversal/</guid>
      <description>589 N-ary Tree Preorder Traversal easy
 Binary Tree  Problem Given an n-ary tree, return thepreordertraversal of its nodes&amp;rsquo; values.
For example, given a3-arytree:
Return its preorder traversal as:[1,3,5,6,2,4].
Note:
Recursive solution is trivial, could you do it iteratively?
Solution Recursive:
import java.util.ArrayList; import java.util.List; /* // Definition for a Node. class Node { public int val; public List&amp;lt;Node&amp;gt; children; public Node() {} public Node(int _val,List&amp;lt;Node&amp;gt; _children) { val = _val; children = _children; } }; */ class NaryTreePreorderTraversal { // N-ary Node Defination class Node { public int val; public List&amp;lt;Node&amp;gt; children; public Node (int _val, List&amp;lt;Node&amp;gt; _children) { val = _val; children = _children; } } private void dfs (Node root, List&amp;lt;Integer&amp;gt; ret) { if (root !</description>
    </item>
    
    <item>
      <title>Leetcode 94 Binary Tree Inorder Traversal</title>
      <link>https://tfprimewj.github.io/2019/10/17/leetcode-94-binary-tree-inorder-traversal/</link>
      <pubDate>Thu, 17 Oct 2019 11:54:06 +0200</pubDate>
      
      <guid>https://tfprimewj.github.io/2019/10/17/leetcode-94-binary-tree-inorder-traversal/</guid>
      <description>94 Binary Tree Inorder Traversal Medium
 Binary Tree  Problem Given a binary tree, return the_inorder_traversal of its nodes&amp;rsquo; values.
Example:
Input: [1,null,2,3] 1 \ 2 / 3 Output: [1,3,2]  Follow up:Recursive solution is trivial, could you do it iteratively?
Solution Recursive:
import java.util.ArrayList; import java.util.List; /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class BinaryTreeInorderTraversal_Recursive { public class TreeNode { int val; TreeNode left; TreeNode right; TreeNode (int x) { val = x; } } private void dfs (TreeNode root, List&amp;lt;Integer&amp;gt; ret) { if (root !</description>
    </item>
    
    <item>
      <title>Leetcode 144 Binary Tree Preorder Traversal</title>
      <link>https://tfprimewj.github.io/2019/10/17/leetcode-144-binary-tree-preorder-traversal/</link>
      <pubDate>Thu, 17 Oct 2019 11:53:06 +0200</pubDate>
      
      <guid>https://tfprimewj.github.io/2019/10/17/leetcode-144-binary-tree-preorder-traversal/</guid>
      <description>144 Binary Tree Preorder Traversal Problem Given a binary tree, return the_preorder_traversal of its nodes&amp;rsquo; values.
Example:
Input: [1,null,2,3] 1 \ 2 / 3 Output: [1,2,3]  Follow up:Recursive solution is trivial, could you do it iteratively?
Solution Recursive:
import java.util.ArrayList; import java.util.List; class BinaryTreePreorderTraversal { // Defination of a binary tree node public class TreeNode { int val; TreeNode left; TreeNode right; public TreeNode (int x) { val = x; } } private void dfs (TreeNode root, List&amp;lt;Integer&amp;gt; ret) { if (root !</description>
    </item>
    
    <item>
      <title>Leetcode 145 Binary Tree Postorder Traversal</title>
      <link>https://tfprimewj.github.io/2019/10/17/leetcode-145-binary-tree-postorder-traversal/</link>
      <pubDate>Thu, 17 Oct 2019 11:52:06 +0200</pubDate>
      
      <guid>https://tfprimewj.github.io/2019/10/17/leetcode-145-binary-tree-postorder-traversal/</guid>
      <description>145 Binary Tree Postorder Traversal Problem Given a binary tree, return the postorder traversal of its nodes&amp;rsquo; values.
Example:
Input: [1,null,2,3] 1 \ 2 / 3 Output: [3,2,1]  Follow up:Recursive solution is trivial, could you do it iteratively?
Solution Recursive:
import java.util.ArrayList; import java.util.List; class BinaryTreePostorderTraversal_Recursive { // TreeNode difination class TreeNode { int val; TreeNode left; TreeNode right; public TreeNode (int _val) { val = _val; } } // Binary Tree Postorder Traversal: Recursive private void dfs (TreeNode root, List&amp;lt;Integer&amp;gt; ret) { if (root !</description>
    </item>
    
    <item>
      <title>Leetcode 35 Search Insert Position</title>
      <link>https://tfprimewj.github.io/2019/10/17/leetcode-35-search-insert-position/</link>
      <pubDate>Thu, 17 Oct 2019 11:52:06 +0200</pubDate>
      
      <guid>https://tfprimewj.github.io/2019/10/17/leetcode-35-search-insert-position/</guid>
      <description>35 Search Insert Position  Binary Search  Problem Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.
You may assume no duplicates in the array.
Example 1:
Input: [1,3,5,6], 5 Output: 2  Example 2:
Input: [1,3,5,6], 2 Output: 1  Example 3:
Input: [1,3,5,6], 7 Output: 4  Example 4:</description>
    </item>
    
    <item>
      <title>Leetcode 53 Maximum Subarray</title>
      <link>https://tfprimewj.github.io/2019/10/07/leetcode-53-maximum-subarray/</link>
      <pubDate>Mon, 07 Oct 2019 11:57:06 +0200</pubDate>
      
      <guid>https://tfprimewj.github.io/2019/10/07/leetcode-53-maximum-subarray/</guid>
      <description>53. Maximum Subarray  Dynamic Programming  Problem Given an integer arraynums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
Example:
Input: [-2,1,-3,4,-1,2,1,-5,4], Output: 6 Explanation: [4,-1,2,1] has the largest sum = 6.  Follow up:
If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.
Solution class MaximumSubarray_SimpleJava { public int maxSubArray (int[] A) { int max = Integer.</description>
    </item>
    
  </channel>
</rss>