<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Recursion on Jinwang Blog</title>
    <link>https://tfprimewj.github.io/tags/recursion/</link>
    <description>Recent content in Recursion on Jinwang Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 17 Oct 2019 11:54:06 +0200</lastBuildDate>
    
	<atom:link href="https://tfprimewj.github.io/tags/recursion/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Leetcode 589 N-ary Tree Preorder Traversal</title>
      <link>https://tfprimewj.github.io/2019/10/17/leetcode-589-n-ary-tree-preorder-traversal/</link>
      <pubDate>Thu, 17 Oct 2019 11:54:06 +0200</pubDate>
      
      <guid>https://tfprimewj.github.io/2019/10/17/leetcode-589-n-ary-tree-preorder-traversal/</guid>
      <description>589 N-ary Tree Preorder Traversal easy
 Binary Tree  Problem Given an n-ary tree, return thepreordertraversal of its nodes&amp;rsquo; values.
For example, given a3-arytree:
Return its preorder traversal as:[1,3,5,6,2,4].
Note:
Recursive solution is trivial, could you do it iteratively?
Solution Recursive:
import java.util.ArrayList; import java.util.List; /* // Definition for a Node. class Node { public int val; public List&amp;lt;Node&amp;gt; children; public Node() {} public Node(int _val,List&amp;lt;Node&amp;gt; _children) { val = _val; children = _children; } }; */ class NaryTreePreorderTraversal { // N-ary Node Defination class Node { public int val; public List&amp;lt;Node&amp;gt; children; public Node (int _val, List&amp;lt;Node&amp;gt; _children) { val = _val; children = _children; } } private void dfs (Node root, List&amp;lt;Integer&amp;gt; ret) { if (root !</description>
    </item>
    
    <item>
      <title>Leetcode 94 Binary Tree Inorder Traversal</title>
      <link>https://tfprimewj.github.io/2019/10/17/leetcode-94-binary-tree-inorder-traversal/</link>
      <pubDate>Thu, 17 Oct 2019 11:54:06 +0200</pubDate>
      
      <guid>https://tfprimewj.github.io/2019/10/17/leetcode-94-binary-tree-inorder-traversal/</guid>
      <description>94 Binary Tree Inorder Traversal Medium
 Binary Tree  Problem Given a binary tree, return the_inorder_traversal of its nodes&amp;rsquo; values.
Example:
Input: [1,null,2,3] 1 \ 2 / 3 Output: [1,3,2]  Follow up:Recursive solution is trivial, could you do it iteratively?
Solution Recursive:
import java.util.ArrayList; import java.util.List; /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class BinaryTreeInorderTraversal_Recursive { public class TreeNode { int val; TreeNode left; TreeNode right; TreeNode (int x) { val = x; } } private void dfs (TreeNode root, List&amp;lt;Integer&amp;gt; ret) { if (root !</description>
    </item>
    
    <item>
      <title>Leetcode 144 Binary Tree Preorder Traversal</title>
      <link>https://tfprimewj.github.io/2019/10/17/leetcode-144-binary-tree-preorder-traversal/</link>
      <pubDate>Thu, 17 Oct 2019 11:53:06 +0200</pubDate>
      
      <guid>https://tfprimewj.github.io/2019/10/17/leetcode-144-binary-tree-preorder-traversal/</guid>
      <description>144 Binary Tree Preorder Traversal Problem Given a binary tree, return the_preorder_traversal of its nodes&amp;rsquo; values.
Example:
Input: [1,null,2,3] 1 \ 2 / 3 Output: [1,2,3]  Follow up:Recursive solution is trivial, could you do it iteratively?
Solution Recursive:
import java.util.ArrayList; import java.util.List; class BinaryTreePreorderTraversal { // Defination of a binary tree node public class TreeNode { int val; TreeNode left; TreeNode right; public TreeNode (int x) { val = x; } } private void dfs (TreeNode root, List&amp;lt;Integer&amp;gt; ret) { if (root !</description>
    </item>
    
    <item>
      <title>Leetcode 145 Binary Tree Postorder Traversal</title>
      <link>https://tfprimewj.github.io/2019/10/17/leetcode-145-binary-tree-postorder-traversal/</link>
      <pubDate>Thu, 17 Oct 2019 11:52:06 +0200</pubDate>
      
      <guid>https://tfprimewj.github.io/2019/10/17/leetcode-145-binary-tree-postorder-traversal/</guid>
      <description>145 Binary Tree Postorder Traversal Problem Given a binary tree, return the postorder traversal of its nodes&amp;rsquo; values.
Example:
Input: [1,null,2,3] 1 \ 2 / 3 Output: [3,2,1]  Follow up:Recursive solution is trivial, could you do it iteratively?
Solution Recursive:
import java.util.ArrayList; import java.util.List; class BinaryTreePostorderTraversal_Recursive { // TreeNode difination class TreeNode { int val; TreeNode left; TreeNode right; public TreeNode (int _val) { val = _val; } } // Binary Tree Postorder Traversal: Recursive private void dfs (TreeNode root, List&amp;lt;Integer&amp;gt; ret) { if (root !</description>
    </item>
    
  </channel>
</rss>