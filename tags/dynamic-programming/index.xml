<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dynamic Programming on Jinwang Blog</title>
    <link>https://tfprimewj.github.io/tags/dynamic-programming/</link>
    <description>Recent content in Dynamic Programming on Jinwang Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Oct 2019 11:57:06 +0200</lastBuildDate>
    
	<atom:link href="https://tfprimewj.github.io/tags/dynamic-programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Leetcode 53 Maximum Subarray</title>
      <link>https://tfprimewj.github.io/2019/10/07/leetcode-53-maximum-subarray/</link>
      <pubDate>Mon, 07 Oct 2019 11:57:06 +0200</pubDate>
      
      <guid>https://tfprimewj.github.io/2019/10/07/leetcode-53-maximum-subarray/</guid>
      <description>53. Maximum Subarray  Dynamic Programming  Problem Given an integer arraynums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
Example:
Input: [-2,1,-3,4,-1,2,1,-5,4], Output: 6 Explanation: [4,-1,2,1] has the largest sum = 6.  Follow up:
If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.
Solution class MaximumSubarray_SimpleJava { public int maxSubArray (int[] A) { int max = Integer.</description>
    </item>
    
  </channel>
</rss>